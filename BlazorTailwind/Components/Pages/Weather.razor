@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1 class="font-semibold text-2xl">Weather</h1>

<p>This component demonstrates showing data.</p>


<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded hidden">Click me</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="relative rounded-xl overflow-auto bg-gray-100">
        <table class="border-collapse table-auto w-full text-sm px-10">
            <thead class="">
                <tr>
                    <th scope="col" class="px-6 py-4 text-left border-l">Date</th>
                    <th scope="col" class="px-6 py-4 text-right">Temp. (C)</th>
                    <th scope="col" class="px-6 py-4 text-right">Temp. (F)</th>
                    <th scope="col" class="px-6 py-4 text-left border-r">Summary</th>
                </tr>
            </thead>
            <tbody class="bg-white rounded-b-lg">
                @foreach (var forecast in forecasts)
                {
                    <tr class="border-b ">
                        <td class="whitespace-nowrap px-6 py-4 font-medium border-l">@forecast.Date.ToShortDateString()</td>
                        <td class="whitespace-nowrap px-6 py-4 text-right">@forecast.TemperatureC</td>
                        <td class="whitespace-nowrap px-6 py-4 text-right">@forecast.TemperatureF</td>
                        <td class="whitespace-nowrap px-6 py-4 border-r">@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
